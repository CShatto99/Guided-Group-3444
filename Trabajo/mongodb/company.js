const MongoClient = require("mongodb").MongoClient;
const assert = require("assert");
const { ObjectId } = require("mongodb");

const url = "mongodb://localhost:27017";

const dbName = "trabajo";

// creates an instance of a MongoDB client
const client = new MongoClient(url, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

let db;

// connects the MongoDB client to the database
client.connect(err => {
  assert.strictEqual(null, err);
  console.log("Connected successfully to mongodb server");

  db = client.db(dbName);
});

/* Function:    insertCompany
 * Parameters:  A company object.
 * Return:      A company document.
 * Purpose:     This function accepts a company object and inserts it into the database.
 *              The database will return the company document generated by MongoDB
 */
const insertCompany = async company => {
  try {
    const collection = db.collection("company");

    const newCompany = await collection.insertOne(company);

    return newCompany.ops[0];
  } catch (error) {
    console.log(error.message);
  }
};

/* Function:    findCompanyByName
 * Parameters:  A company name.
 * Return:      A company document.
 * Purpose:     Queries company collection by company name and returns the resulting
 *              document.
 */
const findCompanyByName = async name => {
  try {
    const collection = db.collection("company");

    const companyFound = await collection.find({ name }).toArray();

    return companyFound[0];
  } catch (error) {
    console.log(error.message);
  }
};

/* Function:    findAllCompanies
 * Parameters:  No parameters.
 * Return:      Array of company objects.
 * Purpose:     Queries and returns all company documents in the company collection.
 */
const findAllCompanies = async () => {
  try {
    const collection = db.collection("company");

    const companies = await collection.find().toArray();

    const filteredCompanies = companies.map(company => {
      const _id = company._id;
      const name = company.name;
      const address = company.address;
      const city = company.city;
      const state = company.state;
      const zip = company.zip;
      const image = company.image;
      return { _id, name, address, city, state, zip, image };
    });

    return filteredCompanies;
  } catch (error) {
    console.log(error.message);
  }
};

/* Function:    saveMessageToDB
 * Parameters:  message.
 * Return:      null
 * Purpose:     Adds message to company's messages
 */
const saveMessageToDB = async (message) => {
  try {
    const collection = db. collection("company");

    const messageParts = message.split(':');

    //get the company object
    const companies = await collection.find({_id: ObjectId(messageParts[0])}).toArray();
    foundCompany = companies[0];

    //if this is the first message create the messages member
    if(foundCompany.messages === undefined) {
      foundCompany.messages = [`${messageParts[1]}: ${messageParts[2]}`];
    }
    //otherwise add it to the messages member 
    else {
      //if the number of max messages is already too large remove the oldest and add the new one
      if(foundCompany.messages.length >= 25) {
        foundCompany.messages.shift();
        foundCompany.messages.push(`${messageParts[1]}: ${messageParts[2]}`)
      } 
      //otherwise simply add the message
      else {
        foundCompany.messages.push(`${messageParts[1]}: ${messageParts[2]}`)
      }
    }

    const updatedCompany = await collection.findOneAndUpdate(
      { _id: foundCompany._id },
      {
        $set: foundCompany,
      },
      { returnOriginal: false }
    );
  } catch (error) {
    console.log(error.message);
  }
}

module.exports = {
  insertCompany,
  findCompanyByName,
  findAllCompanies,
  saveMessageToDB
};
